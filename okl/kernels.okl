@kernel void d2d(const int n, const double *src, double *dst) {
  for (int b = 0; b < (n + BLOCKSIZE - 1) / BLOCKSIZE; b++; @outer) {
    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      int gid = b * BLOCKSIZE + t;
      if (gid < n)
        dst[gid] = src[gid];
    }
  }
}

@kernel void add2s1(const int n, const double *r, const double beta,
                    double *p, double *x) {
  for (int i = 0; i < n; i++; @tile(BLOCKSIZE, @outer, @inner)) {
    x[i] = beta * p[i] + r[i];
  }
}

@kernel void add2s2(const int n, const double *r, const double alpha,
                    double *p, double *x) {
  for (int i = 0; i < n; i++; @tile(BLOCKSIZE, @outer, @inner)) {
    x[i] = p[i] + alpha * r[i];
  }
}

@kernel void sum(const int n, const double *vec, double *wrk) {
  for (int b = 0; b < (n + BLOCKSIZE - 1) / BLOCKSIZE; b++; @outer) {
    @shared double s_vec[BLOCKSIZE];

    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      if (b * BLOCKSIZE + t < n)
        s_vec[t] = vec[b * BLOCKSIZE + t];
      else
        s_vec[t] = 0;
    }

    for (int active = (BLOCKSIZE + 1) / 2; active > 0; active /= 2) {
      for (int t = 0; t < BLOCKSIZE; t++; @inner) {
        if (t < active)
          s_vec[t] = s_vec[t] + s_vec[t + active];
      }
    }

    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      if (t == 0)
        wrk[b] = s_vec[0];
    }
  }
}

@kernel void dot(const int n, const double *x, const double *y, double *wrk) {
  for (int b = 0; b < (n + BLOCKSIZE - 1) / BLOCKSIZE; b++; @outer) {
    @shared double s_xy[BLOCKSIZE];

    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      if (b * BLOCKSIZE + t < n)
        s_xy[t] = x[b * BLOCKSIZE + t] * y[b * BLOCKSIZE + t];
      else
        s_xy[t] = 0;
    }

    for (int active = (BLOCKSIZE + 1) / 2; active > 0; active /= 2) {
      for (int t = 0; t < BLOCKSIZE; t++; @inner) {
        if (t < active)
          s_xy[t] = s_xy[t] + s_xy[t + active];
      }
    }

    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      if (t == 0)
        wrk[b] = s_xy[0];
    }
  }
}

@kernel void glsc3(const int n, const double *x, const double *y, double *z,
                   double *wrk) {
  for (int b = 0; b < (n + BLOCKSIZE - 1) / BLOCKSIZE; b++; @outer) {
    @shared double s_xyz[BLOCKSIZE];

    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      if (b * BLOCKSIZE + t < n)
        s_xyz[t] =
            x[b * BLOCKSIZE + t] * y[b * BLOCKSIZE + t] * z[b * BLOCKSIZE + t];
      else
        s_xyz[t] = 0;
    }

    for (int active = (BLOCKSIZE + 1) / 2; active > 0; active /= 2) {
      for (int t = 0; t < BLOCKSIZE; t++; @inner) {
        if (t < active)
          s_xyz[t] = s_xyz[t] + s_xyz[t + active];
      }
    }

    for (int t = 0; t < BLOCKSIZE; t++; @inner) {
      if (t == 0)
        wrk[b] = s_xyz[0];
    }
  }
}

@kernel void scalar_mul(const int n, const double *r, const double alpha,
                        double *p) {
  for (int i = 0; i < n; i++; @tile(BLOCKSIZE, @outer, @inner)) {
    p[i] = alpha * r[i];
  }
}

@kernel void scalar_div(const int n, const double *r, const double beta,
                        double *p) {
  for (int i = 0; i < n; i++; @tile(BLOCKSIZE, @outer, @inner)) {
    p[i] = r[i] / beta;
  }
}
